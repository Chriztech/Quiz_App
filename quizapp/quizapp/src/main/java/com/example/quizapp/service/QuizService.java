package com.example.quizapp.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.example.quizapp.dao.QuizDao;
import com.example.quizapp.entities.Question;
import com.example.quizapp.entities.QuestionWrapper;
import com.example.quizapp.entities.Quiz;
import com.example.quizapp.entities.Response;
import com.example.quizapp.dao.QuestionDao;

@Service
public class QuizService {
       
	@Autowired
	QuizDao quizDao;
	
	 @Autowired
	 QuestionDao questionDao;

	public ResponseEntity<String> createQuiz(String category, int numQ, String title) {
		//to create qn
		//first create object of quiz
		
		Quiz quiz = new Quiz();
		
		//them set value
		//id will be autogenerated
		quiz.setTitle(title);
		//to set questions
		//first we have to get qns first
		//to get qns we can ask dao 
		List<Question>questions= questionDao.findRandomQuestionsByCategory(category,numQ);
		quiz.setQuestions(questions);
		//once qn ready we have to save it
		quizDao.save(quiz);
		return new ResponseEntity<>("SUCCESS",HttpStatus.OK) ;
	}

	public ResponseEntity<List<QuestionWrapper>> getQuestions(Integer id) {
		//optional because if quizid is not present in database it will throw null error --so its optional data might come
		Optional<Quiz> quiz = quizDao.findById(id);
		
		//converting qns into qnwrapper
		
		//first to hold on quizqn  
		
		// when we use optional first we want to get object(using get())
		
		List<Question> questionsFromDb =quiz.get().getQuestions();
		
		//creating empty list
		
		List<QuestionWrapper> questionsForUser = new ArrayList<>();
		for( Question q:questionsFromDb) {
			QuestionWrapper qw = new QuestionWrapper(q.getId(),q.getCategory(),q.getDifficultylevel(),q.getQuestion(),q.getOption1(),q.getOption2(),q.getOption3());
			questionsForUser.add(qw);
			
		}
		
		return new ResponseEntity<>(questionsForUser,HttpStatus.OK);
	}

	public ResponseEntity<Integer> calculateResult(Integer id, List<Response> responses) {
		Quiz quiz = quizDao.findById(id).get();
		
		List<Question> questions = quiz.getQuestions();
		int right=0;
		int i=0;
		
		for(Response response:responses) {
			if(response.getResponse().equals(questions.get(i).getAnswer())) {
				right++;
				
			}
			i++;
		}
		return new ResponseEntity<>(right,HttpStatus.OK);
	}
}
	
